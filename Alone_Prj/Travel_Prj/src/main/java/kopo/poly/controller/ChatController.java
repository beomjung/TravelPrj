package kopo.poly.controller;


import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp;
import kopo.poly.dto.ChatDTO;
import kopo.poly.dto.UserDTO;
import kopo.poly.service.IChatService;
import kopo.poly.service.IMainService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.util.List;
import java.util.Map;

@Slf4j
@Controller
public class ChatController {

    @Resource(name = "ChatService")
    private IChatService chatService;

    @Resource(name = "MainService")
    private IMainService mainService;

    @GetMapping(value = "main/chat")
    public String chat(HttpServletRequest request, HttpSession session, ModelMap model) throws Exception {
        log.info(this.getClass().getName() + "채팅 컨트롤러 시작!");
        String roomkey = "";
        UserDTO pDTO = new UserDTO();
        String user_id = (String) session.getAttribute("user_id");
        if (user_id.equals("admin")) {
            roomkey = request.getParameter("roomkey");
            model.addAttribute("roomkey", roomkey);
        }
        if (!user_id.equals("admin")) {
            int user_seq = (int) session.getAttribute("user_seq");
            log.info("채팅 룸키 정보 조회 유저 seq" + user_seq);
            pDTO = mainService.selectUserRoom(user_seq);
            roomkey = pDTO.getRoomkey();
            model.addAttribute("pDTO", pDTO);
        }

        List<ChatDTO> rList = mainService.getChatInfo(roomkey);

        if (rList != null) {
            model.addAttribute("rList", rList);
            log.info("가져온 채팅 결과는 ? " + rList.size());
        }
        log.info(this.getClass().getName() + "채팅 컨트롤러 종료!");
        return "/main/chat2";
    }

    @PostMapping(value = "chat/chatConTentRedis")
    @ResponseBody
    public String chatConTentRedis(@RequestBody Map<String, String> map, HttpServletRequest request, HttpSession session) throws Exception {

        log.info(this.getClass().getName() + "채팅 컨트롤러 메세지 저장 시작!!");

        String msg = "";

        ChatDTO pDTO = new ChatDTO();
        String chat_id = map.get("chat_id");
        String chat_dt = map.get("chat_dt");
        String cs_name = map.get("cs_name");
        String chat_content = map.get("chat_content");

        log.info("chat_id : " + chat_id);
        log.info("chat_dt : " + chat_dt);
        log.info("cs_name : " + cs_name);
        log.info("cs_content : " + chat_content);

        pDTO.setChat_id(chat_id);
        pDTO.setChat_dt(chat_dt);
        pDTO.setChat_content(chat_content);
        pDTO.setCs_name(cs_name);

        log.info("pDTO id : " + pDTO.getChat_id());
        log.info("pDTO dt : " + pDTO.getChat_dt());
        log.info("pDTO content : " + pDTO.getChat_content());
        log.info("pDTO name : " + pDTO.getCs_name());

        int res = chatService.InsertChatMessage(pDTO);
        log.info("채팅 정보 저장 결과는 ? : " + res);
        if (res == 1) {
            msg = "success";
        } else {
            msg = "fail";
        }

        log.info(this.getClass().getName() + "채팅 컨트롤러 메세지 저장 종료!!");

        return msg;
    }

    @GetMapping(value = "chat/getChatInfo")
    @ResponseBody
    public String getChatInto(HttpServletRequest request, ModelMap model) throws Exception {
        log.info(this.getClass().getName() + "채팅 정보 가져오는 컨트롤러 시작!");
        String cs_name = request.getParameter("cs_name");
        log.info("cs_name : " + cs_name);

        List<ChatDTO> rList = chatService.getChatInfo(cs_name);

        log.info(this.getClass().getName() + "채팅 정보 가져오는 컨트롤러 종료!");

        return "/main/chat2";
    }


}
